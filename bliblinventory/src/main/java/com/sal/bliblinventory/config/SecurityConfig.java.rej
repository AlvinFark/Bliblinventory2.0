diff a/bliblinventory/src/main/java/com/sal/bliblinventory/config/SecurityConfig.java b/bliblinventory/src/main/java/com/sal/bliblinventory/config/SecurityConfig.java	(rejected hunks)
@@ -1,84 +1,66 @@
 package com.sal.bliblinventory.config;
 
-
-import com.sal.bliblinventory.security.CustomUserDetailsService;
-import com.sal.bliblinventory.security.JwtAuthenticationEntryPoint;
-import com.sal.bliblinventory.security.JwtAuthenticationFilter;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.http.HttpMethod;
-import org.springframework.security.authentication.AuthenticationManager;
-import org.springframework.security.config.BeanIds;
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
-import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
-import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.config.annotation.web.builders.WebSecurity;
 import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
-import org.springframework.security.config.http.SessionCreationPolicy;
 import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
-import org.springframework.security.crypto.password.PasswordEncoder;
-import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
+
+import javax.sql.DataSource;
 
-@Configuration
-@EnableWebSecurity
-@EnableGlobalMethodSecurity(
-        securedEnabled = true,
-        jsr250Enabled = true,
-        prePostEnabled = true
-)
 public class SecurityConfig extends WebSecurityConfigurerAdapter {
     @Autowired
-    CustomUserDetailsService customUserDetailsService;
-
+    private BCryptPasswordEncoder bCryptPasswordEncoder;
     @Autowired
-    private JwtAuthenticationEntryPoint unauthorizedHandler;
+    private DataSource dataSource;
 
-    @Bean
-    public JwtAuthenticationFilter jwtAuthenticationFilter() {
-        return new JwtAuthenticationFilter();
-    }
+    @Value("${spring.queries.users-query}")
+    private String usersQuery;
 
-    @Override
-    public void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {
-        authenticationManagerBuilder
-                .userDetailsService(customUserDetailsService)
-                .passwordEncoder(passwordEncoder());
-    }
+    @Value("${spring.queries.roles-query}")
+    private String rolesQuery;
 
-    @Bean(BeanIds.AUTHENTICATION_MANAGER)
     @Override
-    public AuthenticationManager authenticationManagerBean() throws Exception {
-        return super.authenticationManagerBean();
-    }
-
-    @Bean
-    public PasswordEncoder passwordEncoder() {
-        return new BCryptPasswordEncoder();
+    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
+        auth.
+                jdbcAuthentication()
+                .usersByUsernameQuery(usersQuery)
+                .authoritiesByUsernameQuery(rolesQuery)
+                .dataSource(dataSource)
+                .passwordEncoder(bCryptPasswordEncoder)
+        ;
     }
 
     @Override
     protected void configure(HttpSecurity http) throws Exception {
+
         http
-                .cors().and()
-                .csrf().disable().exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()
-                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()
-                .authorizeRequests()
-                .antMatchers("/", "/LoginPage",
-                        "/api/auth/**",
-                        "/api/user/checkUsernameAvailability",
-                        "/api/user/checkEmailAvailability",
-                        "/css/**",
-                        "/images/**",
-                        "/JS/**",
-                        "/materialize/**").permitAll()
-                .antMatchers(HttpMethod.GET, "/api/bliblinventory/**", "/api/users/**").permitAll()
-                //.antMatchers("/employee").hasRole("EMPLOYEE")
-                //.antMatchers("/admin").hasAuthority("ROLE_ADMIN")
-                //.antMatchers("/superior").hasAuthority("ROLE_SUPERIOR")
-                .anyRequest().permitAll();
+            .authorizeRequests()
+            .antMatchers("/").permitAll()
+            .antMatchers("/api/**").hasAuthority("ADMIN")
+            .antMatchers("/login").permitAll()
+            .antMatchers("/employee/**").hasAuthority("EMPLOYEE")
+            .antMatchers("/superior/**").hasAuthority("SUPERIOR")
+            .antMatchers("/admin/**").hasAuthority("ADMIN")
+            .and().csrf().disable().formLogin()
+            .loginPage("/login").failureUrl("/login?error=true")
+            .defaultSuccessUrl("/")
+            .usernameParameter("username")
+            .passwordParameter("password")
+            .and().logout()
+            .logoutRequestMatcher(new AntPathRequestMatcher("/logout"))
+            .logoutSuccessUrl("/").and().exceptionHandling()
+            .accessDeniedPage("/access-denied");
+    }
 
-        http.addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);
+    @Override
+    public void configure(WebSecurity web) throws Exception {
+        web
+            .ignoring()
+            .antMatchers("/resources/**", "/static/**", "/css/**", "/js/**", "/images/**", "/assets/**");
     }
 
 }
